[project]
name = "VSLAM-LAB"
version = "0.1.0"
description = "VSLAM-LAB"
channels = ["https://fast.prefix.dev/conda-forge"]
platforms = ["linux-64"]

[tasks]

vslamlab = {cmd = "pixi run -e vslamlab python vslamlab.py"}
set-benchmark-path  = {cmd = "pixi run -e vslamlab python path_constants.py set_VSLAMLAB_BENCHMARK_path"}
set-evaluation-path = {cmd = "pixi run -e vslamlab python path_constants.py set_VSLAMLAB_EVALUATION_path"}
demo = {cmd = "pixi run -e vslamlab python demo.py"}

get-benchmark-path = {cmd = "VSLAMLAB_BENCHMARK=$(python3 -c 'from path_constants import VSLAMLAB_BENCHMARK; print(VSLAMLAB_BENCHMARK)')"}

add_dataset_from_image_folders = {cmd = "pixi run -e vslamlab python Datasets/extra-files/add_dataset_from_image_folders.py"}

deactivate_env = {cmd = "pixi run -e vslamlab python utilities.py deactivate_env"}
activate_env = {cmd = "pixi run -e vslamlab python utilities.py activate_env"}

clean_experiment = {cmd = "pixi run -e vslamlab python Evaluate/clean_experiment.py"}

# environments begin
[environments]
vslamlab = {features = ["vslamlab"], no-default-feature = true}
orbslam2 = {features = ["orbslam2"], no-default-feature = true}
dso = {features = ["dso"], no-default-feature = true}
anyfeature = {features = ["anyfeature"], no-default-feature = true}
dust3r = {features = ["dust3r"], no-default-feature = true}
monodataset = {features = ["monodataset"], no-default-feature = true}
ros-env = {features = ["ros-env"], no-default-feature = true}
colmap = {features = ["colmap"], no-default-feature = true}
glomap = {features = ["glomap"], no-default-feature = true}
evo = {features = ["evo"], no-default-feature = true}
r2d2 = {features = ["r2d2"], no-default-feature = true}
monogs = {features = ["monogs"], no-default-feature = true}
droidslam = {features = ["droidslam"], no-default-feature = true}
depthanything = {features = ["depthanything"], no-default-feature = true}
# kalibr = {features = ["kalibr"], no-default-feature = true}
# environments end

# VSLAM-LAB
[feature.vslamlab]
channels = ["https://fast.prefix.dev/conda-forge"]
platforms = ["linux-64"]

[feature.vslamlab.dependencies]
python="*"
pyyaml="*"
matplotlib="*"
pandas="*"
py-opencv="*"
scipy="*"
requests="*"
inputimeout="*"
scikit-learn="*"
tqdm="*"
google-api-python-client="*"
google-auth-oauthlib="*"
huggingface_hub="*"
py7zr="*"

# evo begin
[feature.evo.dependencies]
python="3.12"
py7zr="*"
tqdm="*"

[feature.evo.pypi-dependencies]
evo = "*"

[feature.evo]
channels = ["https://fast.prefix.dev/conda-forge"]
platforms = ["linux-64"]

[feature.evo.tasks]
evo = "evo"
evo_config =  "evo_config set save_traj_in_zip true"
# evo end

# anyfeature begin
[feature.anyfeature]
channels = ["fontan", "https://fast.prefix.dev/conda-forge", "huggingface"]
platforms = ["linux-64"]

[feature.anyfeature.tasks]
git-clone = "git-clone.sh alejandrofontan AnyFeature-VSLAM Baselines"
build = {cmd = "./Baselines/AnyFeature-VSLAM/build.sh", depends-on = ["git-clone"]}
execute = {cmd = './Baselines/AnyFeature-VSLAM/bin/mono', depends-on = ["build"]}

[feature.anyfeature.dependencies]
cxx-compiler="*"
c-compiler="*"
ninja="*"
cmake="*"
pkg-config="*"
libglvnd-egl-cos7-x86_64 ="*"
libglvnd-devel-cos7-x86_64 ="*"
mesa-libegl-devel-cos7-x86_64 ="*"
mesa-libgl-devel-cos7-x86_64 ="*"
mesa-dri-drivers-cos7-x86_64 ="*"
libselinux-cos7-x86_64 ="*"
libxdamage-cos7-x86_64 ="*"
libxxf86vm-cos7-x86_64 ="*"
libxfixes-cos7-x86_64 ="*"
libxext-cos7-x86_64 ="*"
libxau-cos7-x86_64 ="*"
libxcb-cos7-x86_64 ="*"
xorg-libxext ="*"
xorg-libx11 ="*"
xorg-libxfixes="*"
eigen ="*"
yaml-cpp="*"
pandas="*"
opencv="*"
pangolin="*"
g2o="*"
brisk="*"
akaze="*"
siftgpu="*"
datasets="*"
# anyfeature end

# orbslam2 begin
[feature.orbslam2]
channels = ["https://fast.prefix.dev/conda-forge", "fontan"]
platforms = ["linux-64"]

[feature.orbslam2.tasks]
git-clone = "git-clone.sh alejandrofontan ORB_SLAM2 Baselines"
build = {cmd = "./Baselines/ORB_SLAM2/build.sh", depends-on = ["git-clone"]}
execute = {cmd = "./Baselines/ORB_SLAM2/bin/mono", depends-on = ["build"]}

[feature.orbslam2.dependencies]
cxx-compiler="*"
c-compiler="*"
ninja="*"
cmake="*"
pkg-config="*"
libglvnd-egl-cos7-x86_64 ="*"
libglvnd-devel-cos7-x86_64 ="*"
mesa-libegl-devel-cos7-x86_64 ="*"
mesa-libgl-devel-cos7-x86_64 ="*"
mesa-dri-drivers-cos7-x86_64 ="*"
libselinux-cos7-x86_64 ="*"
libxdamage-cos7-x86_64 ="*"
libxxf86vm-cos7-x86_64 ="*"
libxfixes-cos7-x86_64 ="*"
libxext-cos7-x86_64 ="*"
libxau-cos7-x86_64 ="*"
libxcb-cos7-x86_64 ="*"
xorg-libxext ="*"
xorg-libx11 ="*"
xorg-libxfixes="*"
opencv="*"
eigen="*"
yaml-cpp="*"
pangolin="*"
# orbslam2 end

# dso begin
[feature.dso]
channels = ["https://fast.prefix.dev/conda-forge", "fontan"]
platforms = ["linux-64"]

[feature.dso.tasks]
git-clone = "git-clone.sh alejandrofontan dso Baselines"
build = {cmd = "./Baselines/dso/build.sh", depends-on = ["git-clone"]}
execute = {cmd = './Baselines/dso/bin/mono', depends-on = ["build"]}

[feature.dso.dependencies]
cxx-compiler="*"
c-compiler="*"
ninja="*"
cmake="*"
pkg-config="*"
libglvnd-egl-cos7-x86_64 ="*"
libglvnd-devel-cos7-x86_64 ="*"
mesa-libegl-devel-cos7-x86_64 ="*"
mesa-libgl-devel-cos7-x86_64 ="*"
mesa-dri-drivers-cos7-x86_64 ="*"
libselinux-cos7-x86_64 ="*"
libxdamage-cos7-x86_64 ="*"
libxxf86vm-cos7-x86_64 ="*"
libxfixes-cos7-x86_64 ="*"
libxext-cos7-x86_64 ="*"
libxau-cos7-x86_64 ="*"
libxcb-cos7-x86_64 ="*"
xorg-libxext ="*"
xorg-libx11 ="*"
xorg-libxfixes="*"
opencv="*"
eigen ="*"
boost="*"
pangolin="*"
# dso end

# dust3r begin
[feature.dust3r]
channels = ["https://fast.prefix.dev/conda-forge", "nvidia", "pytorch"]
platforms = ["linux-64"]

[feature.dust3r.tasks]
git-clone = "git-clone.sh naver dust3r Baselines"
build = {cmd = "cp Baselines/extra-files/dust3r_execute.py  Baselines/dust3r && cp Datasets/extra-files/downsample_rgb_frames.py  Baselines/dust3r", depends-on = ["git-clone"]}
execute = {cmd = 'python Baselines/dust3r/dust3r_execute.py', depends-on = ["build"]}

[feature.dust3r.dependencies]
cmake="*"
python = "*"
pytorch-cuda="*"
huggingface_hub="*"
gradio="*"
matplotlib="*"
tqdm="*"
opencv="*"
scipy="*"
einops="*"
trimesh="*"
tensorboard="*"
pyglet="*"
safetensors="*"

[feature.dust3r.pypi-dependencies]
torchvision="*"
roma="*"
# dust3r end

# colmap begin
[feature.colmap]
channels = ["https://fast.prefix.dev/conda-forge", "nvidia"]
platforms = ["linux-64"]

[feature.colmap.tasks]

git-clone = {cmd = "git-clone.sh alejandrofontan colmap Baselines", inputs = ["Baselines/colmap/*.sh"] }
setup = {cmd = "pixi run -e vslamlab python Baselines/colmap/colmap_setup.py", inputs = ["Baselines/colmap/*.sh"] }
build = {cmd = "./Baselines/colmap/build.sh", depends-on = ["git-clone", "setup"], inputs = ["Baselines/colmap/*.sh"] }
execute = {cmd = './Baselines/colmap/colmap_reconstruction.sh', depends-on = ["build"]}

colmap = "./Baselines/colmap/bin/colmap"
glomap = "./Baselines/glomap/bin/glomap"

[feature.colmap.dependencies]
cxx-compiler="*"
c-compiler="*"
ninja="*"
cmake="3.28"
pkg-config="*"
libglvnd-egl-cos7-x86_64 ="*"
libglvnd-devel-cos7-x86_64 ="*"
mesa-libegl-devel-cos7-x86_64 ="*"
mesa-libgl-devel-cos7-x86_64 ="*"
mesa-dri-drivers-cos7-x86_64 ="*"
libselinux-cos7-x86_64 ="*"
libxdamage-cos7-x86_64 ="*"
libxxf86vm-cos7-x86_64 ="*"
libxfixes-cos7-x86_64 ="*"
libxext-cos7-x86_64 ="*"
libxau-cos7-x86_64 ="*"
libxcb-cos7-x86_64 ="*"
xorg-libxext ="*"
xorg-libx11 ="*"
xorg-libxfixes="*"
xorg-libxrender="*"
xorg-libice="*"
xorg-libsm="*"
xorg-libxdmcp="*"
xorg-libxau="*"
make="*"
llvm-openmp="*"
libgomp="*"
libxcb="*"
libglu="*"
libblas="*"
libcblas="*"
libboost-devel="*"
suitesparse="*"
eigen="*"
freeimage="*"
glog="0.6.0"
gflags="*"
glew="*"
cgal-cpp="*"
ceres-solver="*"
qt-main="*"
git="*"
flann="*"
sqlite="*"
vlfeat="*"
gmp="*"
lz4-c="*"
metis="*"
libcurand-dev="*"
cuda-nvcc="*"
python="*"
yq="*"
numpy="*"
scipy="*"
pyyaml="*"
matplotlib="*"
# colmap end

# glomap begin
[feature.glomap]
channels = ["https://fast.prefix.dev/conda-forge"]
platforms = ["linux-64"]

[feature.glomap.dependencies]
python="*"
pyyaml="*"
matplotlib="*"

[feature.glomap.tasks]
git-clone = {cmd = "git-clone.sh alejandrofontan glomap Baselines", inputs = ["Baselines/glomap/*.sh"] }
setup = {cmd = "pixi run -e vslamlab python Baselines/glomap/glomap_setup.py", inputs = ["Baselines/glomap/*.sh"] }
build-colmap = {cmd = "pixi run -e colmap build -v", inputs = ["Baselines/glomap/*.sh"] }
build = {cmd = "pixi run -e colmap ./Baselines/glomap/build.sh", depends-on = ["git-clone", "setup", "build-colmap"],  inputs = ["Baselines/glomap/*.sh"] }
execute = {cmd = 'pixi run -e colmap ./Baselines/glomap/glomap_reconstruction.sh', depends-on = ["build"]}
rep_error = {cmd = 'pixi run -e colmap ./reprojection_error.sh'}

# glomap end

# ros begin
[feature.ros-env]
channels = ["https://fast.prefix.dev/conda-forge", "robostack-staging"]
platforms = ["linux-64"]

[feature.ros-env.dependencies]
ros-noetic-desktop="*"

[feature.ros-env.tasks]
extract-rosbag-frames = "python Datasets/extra-files/extract_rosbag_frames.py"
# ros end

# monodataset begin
[feature.monodataset]
channels = ["https://fast.prefix.dev/conda-forge"]
platforms = ["linux-64"]

[feature.monodataset.tasks]
git-clone = "git-clone.sh tum-vision mono_dataset_code Baselines"
build = {cmd = "./Baselines/mono_dataset_code/build.sh", depends-on = ["git-clone"]}
undistort = {cmd = "./Baselines/mono_dataset_code/bin/playbackDataset"}

[feature.monodataset.dependencies]
cxx-compiler="*"
c-compiler="*"
ninja="*"
cmake="*"
pkg-config="*"
libglvnd-egl-cos7-x86_64 ="*"
libglvnd-devel-cos7-x86_64 ="*"
mesa-libegl-devel-cos7-x86_64 ="*"
mesa-libgl-devel-cos7-x86_64 ="*"
mesa-dri-drivers-cos7-x86_64 ="*"
libselinux-cos7-x86_64 ="*"
libxdamage-cos7-x86_64 ="*"
libxxf86vm-cos7-x86_64 ="*"
libxfixes-cos7-x86_64 ="*"
libxext-cos7-x86_64 ="*"
libxau-cos7-x86_64 ="*"
libxcb-cos7-x86_64 ="*"
xorg-libxext ="*"
xorg-libx11 ="*"
xorg-libxfixes="*"
opencv="*"
eigen ="*"
libzip = "*"
# monodataset end

# r2d2 begin
[feature.r2d2]
channels = ["https://fast.prefix.dev/conda-forge", "pytorch"]
platforms = ["linux-64"]

[feature.r2d2.tasks]
git-clone = "git-clone.sh naver r2d2 Baselines"
execute = "python Baselines/r2d2/extract.py --model Baselines/r2d2/models/r2d2_WASF_N16.pt --sequence_path /media/fontan/data/VSLAM-LAB-Benchmark/ETH/table_3 --top-k 2"

check_cuda = 'python -c "import torch; print(torch.cuda.is_available())"'

[feature.r2d2.dependencies]
python = "*"
tqdm = "*"
pillow = "*"
numpy = "*"
matplotlib = "*"
scipy = "*"
pytorch-gpu = "*"
torchvision="*"
# r2d2 end

# monogs begin
[feature.monogs]
channels = ["https://fast.prefix.dev/conda-forge", "nvidia", "pytorch"]
platforms = ["linux-64"]

[feature.monogs.system-requirements]
cuda = "12.4"

[feature.monogs.tasks]
git-clone = "git-clone.sh alejandrofontan MonoGS Baselines"
build = {cmd = "pip install Baselines/MonoGS/submodules/simple-knn Baselines/MonoGS/submodules/diff-gaussian-rasterization", depends-on = ["git-clone"]}
execute = {cmd = 'python Baselines/MonoGS/slam.py', depends-on = ["build"]}

check_cuda = 'python -c "import torch; print(torch.cuda.is_available())"'

[feature.monogs.dependencies]

python = {version="3.8.19", build="hd12c33a_0_cpython", channel="https://fast.prefix.dev/conda-forge"}
pytorch = {version="2.4.0", build="py3.8_cuda12.4_cudnn9.1.0_0", channel="pytorch"}
pytorch-cuda = {version="12.4", build="hc786d27_6", channel="pytorch"}
torchvision = {version="0.19.0", build="py38_cu124", channel="pytorch"}
torchaudio = {version="2.4.0", build="py38_cu124", channel="pytorch"}
plyfile = {version="0.8.1", build="pyhd8ed1ab_0", channel="https://fast.prefix.dev/conda-forge"}
pip = "*"
cuda = "12.4"

[feature.monogs.pypi-dependencies]
opencv-python="==4.8.1.78"
munch="*"
trimesh="*"
# evo="==1.11.0"
wandb="*"
open3d="==0.17.0"
torchmetrics="*"
imgviz="*"
PyOpenGL="*"
glfw="*"
PyGLM="*"
lpips="*"
rich="*"
ruff="*"
# monogs end

# droidslam begin
[feature.droidslam]
channels = ["nvidia/label/cuda-12.0.0","conda-forge"]
platforms = ["linux-64"]

[feature.droidslam.system-requirements]
cuda = "12.0"

[feature.droidslam.tasks]
git-clone = {cmd = "git-clone.sh alejandrofontan DROID-SLAM Baselines", inputs = ["Baselines/DROID-SLAM"]}
setup = {cmd = "pixi run -e vslamlab python droidslam_setup.py", cwd = "Baselines/DROID-SLAM", depends-on = ["git-clone"]}
build = {cmd = "python setup.py install", cwd = "Baselines/DROID-SLAM", depends-on = ["git-clone"], inputs = ["build"]}
execute = {cmd = 'python droidslam_vslamlab.py', cwd = "Baselines/DROID-SLAM", depends-on = ["build"]}

[feature.droidslam.pypi-options]
no-build-isolation = ["torch-scatter"]

[feature.droidslam.dependencies]
pytorch = {version =">=2.4.0,<3", build = "cuda120*"}
cuda = "12.0.0"
pip = ">=24.2,<25"
python="3.11.*"
compilers = ">=1.7.0,<1.8.0"
make="4.2.1"
cmake = ">=3.30.3,<4"
tqdm = ">=4.66.5,<5"
open3d = ">=0.18.0,<0.19"
scipy = ">=1.14.1,<2"
opencv = ">=4.10.0,<5"
suitesparse = ">=7.8.2,<8"
matplotlib = ">=3.9.2,<4"
pyyaml = ">=6.0.2,<7"

[feature.droidslam.pypi-dependencies]
torch-scatter = {version = ">=2.1.2,<3"}
# droidslam end

# depthanything begin
[feature.depthanything]
channels = ["conda-forge","nvidia/label/cuda-12.0.0"]
platforms = ["linux-64"]

[feature.depthanything.system-requirements]
cuda = "12.0"

[feature.depthanything.tasks]
git-clone = {cmd = "git-clone.sh DepthAnything Depth-Anything-V2 Baselines", inputs = ["Baselines/Depth-Anything-V2"]}
execute = {cmd = 'python Baselines/extra-files/Depth-Anything-V2/run.py'}

[feature.depthanything.dependencies]
pytorch = {version="2.5.1", build="cuda126_py313he9a4f5b_303", channel="conda-forge"}
python= {version="3.13.0", build="h9ebbce0_100_cp313", channel="conda-forge"}
torchvision= {version="0.20.1", build="cuda126py313hf79861d_0", channel="conda-forge"}
tqdm="*"

[feature.depthanything.pypi-dependencies]
opencv-python= "==4.10.0.84"
gradio_imageslider= "*"
# depthanything end

# kalibr begin
# [feature.kalibr]
# channels = ["https://fast.prefix.dev/conda-forge", "esrf-bcu", "robostack-staging"]
# platforms = ["linux-64"]
# 
# [feature.kalibr.tasks]
# git-clone = "git-clone.sh alejandrofontan kalibr Baselines/kalibr_catkin/src && cd Baselines/kalibr_catkin/src && catkin init"
# build = {cmd = "cd Baselines/kalibr_catkin && catkin build -DCMAKE_BUILD_TYPE=Release -j8", depends-on = ["git-clone"]}
# kalibr_bagcreater = {cmd = "./Baselines/kalibr_catkin/src/kalibr/calibrate.sh"}
# 
# [feature.kalibr.dependencies]
# python = {version="3.9.18", build="h0755675_0_cpython", channel="https://fast.prefix.dev/conda-forge"}
# ros-noetic-desktop="*"
# compilers="*"
# cmake="*"
# pkg-config="*"
# make="*"
# ninja="*"
# colcon-common-extensions="*"
# catkin_tools="*"
# rosdep="*"
# boost="*"
# suitesparse = {version="5.4.0", build="h717dc36_0", channel="https://fast.prefix.dev/conda-forge"}
# tbb="*"
# opencv="*"
# libv4l="*"
# pip="*"
# scipy="*"
# matplotlib="*"
# ipython="*"
# wxpython ="*"
# tk ="*"
# pyx="*"
# libtiff="*"
# 
# [feature.kalibr.pypi-dependencies]
# igraph="*"
# kalibr end